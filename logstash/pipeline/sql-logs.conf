input {
  # HTTP input to receive SQL logs from API server
  http {
    port => 5044
    host => "0.0.0.0"
  }
}

filter {
  # Parse SQL Query logs
  if [message] =~ "^\[SQL Query\]" {
    grok {
      match => {
        "message" => "\[SQL Query\] %{GREEDYDATA:sql_query}"
      }
    }
    mutate {
      add_field => { "log_type" => "sql_query" }
    }
  }

  # Parse SQL Parameters logs
  else if [message] =~ "^\[SQL Params\]" {
    grok {
      match => {
        "message" => "\[SQL Params\] %{GREEDYDATA:sql_params}"
      }
    }
    mutate {
      add_field => { "log_type" => "sql_params" }
    }
  }

  # Parse SQL Execution Time logs
  else if [message] =~ "^\[SQL Execution Time\]" {
    grok {
      match => {
        "message" => "\[SQL Execution Time\] %{NUMBER:execution_time_ms}ms"
      }
    }
    mutate {
      add_field => { "log_type" => "sql_performance" }
      convert => { "execution_time_ms" => "float" }
    }

    # Add performance categories
    if [execution_time_ms] {
      if [execution_time_ms] > 1000 {
        mutate { add_field => { "performance_category" => "slow" } }
      } else if [execution_time_ms] > 500 {
        mutate { add_field => { "performance_category" => "medium" } }
      } else {
        mutate { add_field => { "performance_category" => "fast" } }
      }
    }
  }

  # Parse SQL Error logs
  else if [message] =~ "^\[SQL Error\]" {
    grok {
      match => {
        "message" => "\[SQL Error\] %{GREEDYDATA:error_message}"
      }
    }
    mutate {
      add_field => { "log_type" => "sql_error" }
      add_field => { "performance_category" => "error" }
    }
  }

  # Add timestamp
  mutate {
    add_field => { "log_timestamp" => "%{@timestamp}" }
  }

  # Extract query type from SQL
  if [sql_query] {
    if [sql_query] =~ /^SELECT/ {
      mutate { add_field => { "query_type" => "SELECT" } }
    } else if [sql_query] =~ /^INSERT/ {
      mutate { add_field => { "query_type" => "INSERT" } }
    } else if [sql_query] =~ /^UPDATE/ {
      mutate { add_field => { "query_type" => "UPDATE" } }
    } else if [sql_query] =~ /^DELETE/ {
      mutate { add_field => { "query_type" => "DELETE" } }
    } else if [sql_query] =~ /^CREATE/ {
      mutate { add_field => { "query_type" => "CREATE" } }
    } else {
      mutate { add_field => { "query_type" => "OTHER" } }
    }
  }
}

output {
  # Send to Elasticsearch
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "sql-logs-%{+YYYY.MM.dd}"
  }

  # Debug output
  stdout {
    codec => rubydebug
  }
}